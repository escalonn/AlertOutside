@model LocationAlert.Client.Models.Account



@{
    ViewData["Title"] = "My Google Maps Demo";
}

@*https://developers.google.com/maps/documentation/javascript/examples/drawing-tools*@

<h3>Location Regions</h3>

<div  id="map" style="width: 75%; height: 400px; margin-left: 10%">

    @section Scripts {
        <script>
            var regions = [];

            function initMap() {
                var uluru = { lat: 39.952584, lng: -75.165222 };
                var map = new google.maps.Map(document.getElementById('map'), {
                    zoom: 6,
                    center: uluru
                });
                var marker = new google.maps.Marker({
                    position: uluru,
                    map: map,
                    editable: true
                });

                var drawingManager = new google.maps.drawing.DrawingManager({
                    drawingMode: google.maps.drawing.OverlayType.MARKER,
                    drawingControl: true,
                    drawingControlOptions: {
                        position: google.maps.ControlPosition.TOP_CENTER,
                        drawingModes: ['circle']
                    },
                    markerOptions: { icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png' },
                    circleOptions: {
                        fillColor: '#f45642',
                        fillOpacity: 0.5,
                        strokeWeight: 1,
                        clickable: false,
                        editable: true,
                        zIndex: 1
                    }
                });
                drawingManager.setMap(map);

                google.maps.event.addListener(drawingManager, 'circlecomplete', function (circle) {

                    if (regions.length >= 3)
                    {
                        circle.setMap(null);
                    }
                    else
                    {
                        circle.id = (regions.length);
                        regions.push(circle);
                        updateTables();

                        google.maps.event.addListener(circle, 'radius_changed', function () {
                            updateTables();
                        });

                        google.maps.event.addListener(circle, 'center_changed', function () {
                            updateTables();
                        });
                    }
                });

                // Load circles from model
                @foreach (var item in Model.RegionList)
                {
                    @: var reg = new google.maps.Circle({ id: @item.ID, center: { lat:@item.Latitude ,lng:@item.Longitude}, radius: @item.Radius, fillColor: '#f45642', fillOpacity: 0.5, strokeWeight: 1, clickable: false, editable: true, zIndex: 1 });
                    @: regions.push(reg);
                }

                for (var i = 0; i < regions.length; i++) {
                    regions[i].setMap(map);
                }
            }


            function updateTables() {

                var table1 = document.getElementById("Region1");
                var table2 = document.getElementById("Region2");
                var table3 = document.getElementById("Region3");

                var tables = [table1, table2, table3];

                for (var i = 0; i < tables.length; i++) {
                    if (regions[i] != null) {
                        tables[i].rows[0].cells[1].innerHTML = regions[i].id;
                        tables[i].rows[1].cells[1].innerHTML = regions[i].center.lat();
                        tables[i].rows[2].cells[1].innerHTML = regions[i].center.lng();
                        tables[i].rows[3].cells[1].innerHTML = regions[i].getRadius();
                    }

                }
            }

            function deleteRegion() {
                regions[regions.length-1].setMap(null);
                regions.splice(regions.length-1);
            }

            function saveRegions() {

                var latData = [];
                var lngData = [];
                var radiusData = [];

                regions.forEach(function (element) {
                    latData[element.id] = element.center.lat();
                    lngData[element.id] = element.center.lng();
                    radiusData[element.id] = element.getRadius();
                });

                $.ajax({
                    url: '@Url.Action("EditRegion", "Account")',
                    // This is important for passing arrays
                    traditional: true,
                    data: { latData: latData, lngData: lngData, radiusData: radiusData },
                    success: function(data) {
                        // It was successful
                        location.reload();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        // Error occurred
                        alert(xhr.responseText);
                    }
                })
            }
        </script>
        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDqINRPfJaUcmFkhziYrl3KgMY3NYCG4uQ&libraries=drawing&callback=initMap">
        </script>
    }
</div>
<br />
<div style="margin-left: 10%;">
    <button class="btn btn-primary" onclick="saveRegions()">Save Regions </button>
    <button class="btn btn-danger" onclick="deleteRegion()">Delete Region </button>
</div>
<br />
@*@Html.Partial("RegionList", Model.RegionList)*@
<div class="container">
    @Html.Partial("RegionTables");
</div>